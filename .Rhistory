stargazer(m1, cf1, m2, cf2,type='text')
# вывод результатов
stargazer(m2, cf2,type='text')
xplot <- seq(-4,4,by=0.01)
fplot <- dnorm(xplot)
plot(xplt, fplot, type='l')
plot(xplot, fplot, type='l')
plot(xplot, fplot, type='l',
xlab='Значения t-статистики',
ylab="pdf",
main="Плотность N(0,1)")
# диаграмма рассеивания для наших данных
plot(x = x,y = y,
main = "Диаграмма рассеивания",
xlab = "Доза витамана C, мг",
ylab = "Длина зубов, мм")
plot(xplot, fplot, type='l',
xlab='Значения t-статистики',
ylab="pdf",
main="Плотность N(0,1)")
plot(xplot, fplot, type='l',
xlab='Значения t-статистики',
ylab="pdf",
main="Плотность N(0,1)")
plot(xplot, fplot, type='l',
xlab='Значения t-статистики',
ylab="pdf",
main="Плотность N(0,1)")
xplot <- seq(-4,4,by=0.01)
fplot <- dnorm(xplot)
plot(xplot, fplot, type='l',
xlab='Значения t-статистики',
ylab="pdf",
main="Плотность N(0,1)")
xplot <- seq(-4,4,by=0.01)
fplot <- dnorm(xplot)
plot(xplot, fplot, type='l',
xlab='Значения t-статистики',
ylab="pdf",
main="Плотность N(0,1)")
######################################
#                                    #
#      The Effect of Vitamin C       #
#   on Tooth Growth in Guinea Pigs   #
#                                    #
#         Владимир Пырлик            #
#           ЭКОНОМЕТРИКА             #
#                                    #
#             Неделя 3               #
#    Эмпирический пример по теме     #
#    "Парная линейная регрессия"     #
#                                    #
######################################
# На основе данных из работы
# Crampton, E. W. (1947). The growth of the odontoblast
# of the incisor teeth as a criterion of vitamin C intake
# of the guinea pig. The Journal of Nutrition, 33(5),
# 491--504. 10.1093/jn/33.5.491.
##################################
#             ПАКЕТЫ             #
##################################
# установка пакетов, запускать один раз или для обновления
#install.packages(c("datasets,
#                   sandwich,
#                   lmtest,
#                   stargazer"))
# подгружаем пакеты
library(datasets)
library(sandwich)
library(lmtest)
library(stargazer)
##################################
#             ДАННЫЕ             #
##################################
# загружаем данные
# краткое описание данных по ссылке (детали - в статье):
# https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/ToothGrowth.html
data("ToothGrowth")
# переменные для текущей работы
y <- ToothGrowth$len    #длина зубов
x <- ToothGrowth$dose   #доза витамина
# диаграмма рассеивания для наших данных
plot(x = x,y = y,
main = "Диаграмма рассеивания",
xlab = "Доза витамана C, мг",
ylab = "Длина зубов, мм")
##################################
#           РЕГРЕССИЯ            #
##################################
# оценки МНК парной линейной регрессии
# без функции lm(), просто алгебра
b1 <- cov(x,y)/var(x)
b0 <- mean(y) - b1*mean(x)
# дорисовываем на график регрессионную линию
abline(b0,b1)
# оценка парной регрессии МНК, функция lm()
m1 <- lm(len~1+dose, data=ToothGrowth)
# оценка стандартных ошибок, робастная формула
cf1 <- coeftest(m1, df=Inf, vcov=vcovHC)
cf1
cf1$estimate
cf1[1]
cf1[1,1]
cf1[2,3]
##################################
#      ПРОВЕРКА ГИПОТЕЗЫ         #
##################################
t1 <- cf1[2,1]/cf1[2,2]
t1
Pv1 <- 1-dnorm(t1)
Pv1
Pv1 <- 1-pnorm(t1)
Pv1
pnorm(t1)
plot(x = log(x),y = log(y),
main = "Диаграмма рассеивания",
xlab = "Доза витамана C, мм, log-шкала",
ylab = "Длина зубов, мг, log-шкала")
b11 <- cov(log(x),log(y))/var(log(x))
b01 <- mean(log(y)) - b11*mean(log(x))
abline(b01,b11)
m2  <- lm(log(len)~1+log(dose), data=ToothGrowth)
cf2 <- coeftest(m2, df=Inf, vcov=vcovHC)
stargazer(m2, cf2,type='text')
t2  <- cf2[2,1]/cf1[2,2]
Pv2 <- 1-pnorm(t2)
Pv2
cf2
t2
t2  <- cf2[2,1]/cf2[2,2]
Pv2 <- 1-pnorm(t2)
Pv2
library(datasets)
library(sandwich)
library(lmtest)
library(stargazer)
##################################
#             ДАННЫЕ             #
##################################
# загружаем данные
# краткое описание данных по ссылке (детали - в статье):
# https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/ToothGrowth.html
data("ToothGrowth")
force(ToothGrowth)
View(ToothGrowth)
# переменные для текущей работы
y <- ToothGrowth$len    #длина зубов
x <- ToothGrowth$dose   #доза витамина
# диаграмма рассеивания для наших данных
plot(x = x,y = y,
main = "Диаграмма рассеивания",
xlab = "Доза витамана C, мг",
ylab = "Длина зубов, мм")
##################################
#           РЕГРЕССИЯ            #
##################################
# оценки МНК парной линейной регрессии
# без функции lm(), просто алгебра
b1 <- cov(x,y)/var(x)
b0 <- mean(y) - b1*mean(x)
# дорисовываем на график регрессионную линию
abline(b0,b1)
# оценка парной регрессии МНК, функция lm()
m1 <- lm(len~1+dose, data=ToothGrowth)
View(m1)
# оценка стандартных ошибок, робастная формула
cf1 <- coeftest(m1, df=Inf, vcov=vcovHC)
# вывод результатов в таблицу
stargazer(m1,cf1,type='text')
cf1
##################################
#      ПРОВЕРКА ГИПОТЕЗЫ         #
##################################
t1  <- cf1[2,1]/cf1[2,2]
t1
Pv1 <- 1-pnorm(t1) #1-сторонняя!!!
Pv1
data("ToothGrowth")
force(ToothGrowth)
View(ToothGrowth)
require(graphics)
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
qchisq(0.05)
qchisq(0.05,1)
qchisq(0.95,1)
qchisq(0.95,2)
qchisq(0.95,3)
qchisq(0.95,4)
qchisq(0.95,5)
library(foreach)
m    <- c(1,2,3,4,5)
tab1 <- foreach(alpha=c(0.1,0.05,0.01), .combine=rbind) %do% {
sapply(m, function(x) qchisq(1-alpha, x))
}
rownames(tab1) = paste("alpha=",c(0.1,0.01,0.05),sep="")
tab1
colnames(tab1) = paste("m=",m,sep="")
tab1
?kable
paste("$\\alpha$=",c(0.1,0.05,0.01),sep="")
setwd("~/ECOX21")
dta <- read.csv("SeoulBikeData.csv")
View(dta)
dta <- read.csv("NYC_2019.csv")
View(dta)
library(geosphere)
install.packages("geosphere")
install.packages(c("geosphere",
"foreach"))
library(geosphere)
library(foreach)
?distm()
distm(x=c(dta$longitude[1],dta$latitude[1]), y=cbind(dta$longitude,dta$latitude))
distm(x=c(dta$longitude[1],dta$latitude[1]), y=rbind(dta$longitude,dta$latitude))
distm(x=cbind(dta$longitude,dta$latitude), y=cbind(dta$longitude,dta$latitude))
distm(x=cbind(dta$longitude[1],dta$latitude[1]), y=cbind(dta$longitude[2],dta$latitude[2]))
distm(x=cbind(dta$longitude[1],dta$latitude[1]), y=cbind(dta$longitude[2],dta$latitude[2]))[1,1]
distm(x=cbind(dta$longitude[1],dta$latitude[1]),
y=cbind(dta$longitude,dta$latitude))
distm(x=cbind(dta$longitude[1],dta$latitude[1]),
y=cbind(dta$longitude[2],dta$latitude[2]))[1,1]
distm(x=c(dta$longitude[1],dta$latitude[1]),
y=c(dta$longitude[2],dta$latitude[2]))[1,1]
withinXkm <- funtion(pt,vec,X) {
dists <- foreach(i=1:nrow(vec),.combine=c) %do% {
distm(x=pt,y=vec[i,1:2])
}
return(sum(dists<=X))
}
withinXkm <- funtion(pt,vec,X) {
dists <- foreach(i=1:nrow(vec),.combine=c) %do% {
distm(x=pt,y=vec[i,1:2])
}
return(sum(dists<=X))
}
withinXkm <- funtion(pt,vec,X) {
dists <- foreach(i=1:nrow(vec),.combine=c) %do% {
distm(x=pt,y=vec[i,1:2])
}
return(sum(dists<=X))
}
withinXkm <- function(pt,vec,X) {
dists <- foreach(i=1:nrow(vec),.combine=c) %do% {
distm(x=pt,y=vec[i,1:2])
}
return(sum(dists<=X))
}
within10km <- sapply(i=1:nrow(dta),
function(i) {withinXkm(pt  = c(dta$longitude[i],dta$latitude[i]),
vec = cbind(dta$longitude,dta$latitude),
X   = 10) - 1
}
)
within10km <- sapply(function(i) {withinXkm(pt  = c(dta$longitude[i],dta$latitude[i]),
vec = cbind(dta$longitude,dta$latitude),
X   = 10) - 1
},
i=1:nrow(dta))
?sapply
within10km <- sapply(i=1:nrow(dta),
function(i) {
withinXkm(pt  = c(dta$longitude[i],dta$latitude[i]),
vec = cbind(dta$longitude,dta$latitude),
X   = 10) - 1
}
)
within10km <- sapply(i=1:nrow(dta),
function(i) withinXkm(pt  = c(dta$longitude[i],dta$latitude[i]),
vec = cbind(dta$longitude,dta$latitude),
X   = 10) - 1)
within10km <- sapply(i=1:nrow(dta),function(j) withinXkm(pt  = c(dta$longitude[j],dta$latitude[j]),
vec = cbind(dta$longitude,dta$latitude),
X   = 10) - 1)
withinXkm(pt  = c(dta$longitude[1],dta$latitude[1]),
vec = cbind(dta$longitude,dta$latitude),
X   = 10) - 1
withinXkm <- function(pt,vec,X) {
dists <- foreach(i=1:nrow(vec),.combine=c) %do% {
distm(x=pt,y=vec[i,1:2])
}
return(sum(dists<=X*1000))
}
withinXkm(pt  = c(dta$longitude[1],dta$latitude[1]),
vec = cbind(dta$longitude,dta$latitude),
X   = 10) - 1
withinXkm(pt  = c(dta$longitude[1],dta$latitude[1]),
vec = cbind(dta$longitude,dta$latitude),
X   = 1) - 1
fun1 <- function(i) {
withinXkm(pt  = c(dta$longitude[i],dta$latitude[i]),
vec = cbind(dta$longitude,dta$latitude),
X   = 1) - 1
}
within1km <- sapply(i=1:nrow(dta),fun1)
within1km <- sapply(1:nrow(dta),
function(i) {
withinXkm(pt  = c(dta$longitude[i],dta$latitude[i]),
vec = cbind(dta$longitude,dta$latitude),
X   = 1) - 1
}
)
distm(x=c(dta$longitude[1],dta$latitude[1]),
y=c(dta$longitude[2],dta$latitude[2]))[1,1]
distm(x=c(dta$longitude[1],dta$latitude[1]),
y=cbind(dta$longitude[1:5],dta$latitude[1:5]))
distm(x=c(dta$longitude[1],dta$latitude[1]),
y=cbind(dta$longitude[-1],dta$latitude[-1]))
distm(x=c(dta$longitude[1],dta$latitude[1]),
y=cbind(dta$longitude[-1],dta$latitude[-1]))[1,:]
distm(x=c(dta$longitude[1],dta$latitude[1]),
y=cbind(dta$longitude[-1],dta$latitude[-1]))[1,]
distm(x=c(dta$longitude[1],dta$latitude[1]),
y=cbind(dta$longitude[-1],dta$latitude[-1]))[1,]<1000
sum(distm(x=c(dta$longitude[1],dta$latitude[1]),
y=cbind(dta$longitude[-1],dta$latitude[-1]))[1,]<1000)
withinXkm <- function(i,X) {
sum(distm(x=c(dta$longitude[i],dta$latitude[i]),
y=cbind(dta$longitude[-i],dta$latitude[-i]))[1,]<X*1000)
}
within1km <- sapply(1:nrow(dta), function(i) withinXkm(i,1))
set.seed(146)
smpl <- order(runif(nrow(dta)))[1:5000]
dta1 <- dta[smpl,]
sum(distm(x=c(dta1$longitude[i],dta1$latitude[i]),
y=cbind(dta1$longitude[-i],dta1$latitude[-i]))[1,]<X*1000)
withinXkm <- function(i,X) {
sum(distm(x=c(dta1$longitude[i],dta1$latitude[i]),
y=cbind(dta1$longitude[-i],dta1$latitude[-i]))[1,]<X*1000)
}
within1km <- sapply(1:nrow(dta), function(i) withinXkm(i,1))
within1km <- sapply(1:5, function(i) withinXkm(i,1))
within1km
within1km <- sapply(1:nrow(dta), function(i) withinXkm(i,1))
smpl <- order(runif(nrow(dta)))[1:1000]
dta1 <- dta[smpl,]
withinXkm <- function(i,X) {
sum(distm(x=c(dta1$longitude[i],dta1$latitude[i]),
y=cbind(dta1$longitude[-i],dta1$latitude[-i]))[1,]<X*1000)
}
set.seed(146)
smpl <- order(runif(nrow(dta)))[1:1000]
dta1 <- dta[smpl,]
#distance calc
#distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)
withinXkm <- function(i,X) {
sum(distm(x=c(dta1$longitude[i],dta1$latitude[i]),
y=cbind(dta1$longitude[-i],dta1$latitude[-i]))[1,]<X*1000)
}
within5km <- sapply(1:nrow(dta), function(i) withinXkm(i,5))
within5km
plot(x=within5km, y=dta1$price)
within5km <- sapply(1:nrow(dta1), function(i) withinXkm(i,5))
plot(x=within5km, y=dta1$price)
plot(x=within5km, y=log(dta1$price))
set.seed(146)
smpl <- order(runif(nrow(dta)))[1:5000]
dta1 <- dta[smpl,]
withinXkm <- function(i,X) {
sum(distm(x=c(dta1$longitude[i],dta1$latitude[i]),
y=cbind(dta1$longitude[-i],dta1$latitude[-i]))[1,]<X*1000)
}
within5km <- sapply(1:nrow(dta1), function(i) withinXkm(i,5))
plot(x=within5km, y=log(dta1$price))
within1km <- sapply(1:nrow(dta1), function(i) withinXkm(i,1))
plot(x=within1km, y=log(dta1$price))
plot(x=within5km, y=log(dta1$price))
names(dta1)
dta2 <- data.frame(price               = dta1$price,
room_type           = dta1$room_type,
minimum_nights      = dta1$minimum_nights,
reviews_per_month   = dta1$reviews_per_month,
neighbourhood_group = dta1$neighbourhood_group,
neighbourhood       = dta1$neighbourhood,
within1km           = within1km,
within5km           = within5km)
write.csv2(dta2,"NYC_2019_smpl5000_dists.csv")
lm1 <- lm(log(price)~1+within1km)
lm1 <- lm(log(price)~1+within1km, data=dta2)
View(dta2)
summary(dta2)
dta2 <- dta2[dta2$price>0,]
write.csv2(dta2,"NYC_2019_smpl5000_dists.csv")
lm1 <- lm(log(price)~1+within1km, data=dta2)
lm1
abline(lm1$coefficients)
plot(x=within1km, y=log(dta1$price))
abline(lm1$coefficients)
plot(x=within5km, y=log(dta1$price))
abline(lm1$coefficients)
lm1 <- lm(log(price)~1+within5km, data=dta2)
plot(x=within5km, y=log(dta1$price))
abline(lm1$coefficients)
abline(lm1$coefficients, lwd=2, col='red')
plot(x=within5km, y=log(dta1$price),pch='.')
abline(lm1$coefficients, lwd=2, col='red')
abline(lm1$coefficients, lwd=1.5, col='red')
plot(x=within5km, y=log(dta1$price),pch='.')
abline(lm1$coefficients, lwd=1.5, col='red')
plot(x=within5km, y=log(dta1$price),pch='o')
plot(x=within5km, y=log(dta1$price),pch=':')
plot(x=within5km, y=log(dta1$price),pch='*')
abline(lm1$coefficients, lwd=1.5, col='red')
plot(x=within5km, y=log(dta1$price),pch='.')
abline(lm1$coefficients, lwd=1.5, col='red')
abline(lm1$coefficients, lwd=2, col='red')
#multiple regression
lm2 <- lm(log(price)~1+within5km+minimum_nights, data=dta2)
lm2
#multiple regression
lm2 <- lm(log(price)~1+within5km+within1km, data=dta2)
lm2
#multiple regression
lm2 <- lm(log(price)~1+within5km+neighbourhood_group, data=dta2)
lm2
#multiple regression
lm2 <- lm(log(price)~-1+within5km+neighbourhood_group, data=dta2)
lm2
#multiple regression
lm2 <- lm(log(price)~-1+within5km+neighbourhood, data=dta2)
lm2
#multiple regression
lm2 <- lm(log(price)~1+within5km+reviews_per_month, data=dta2)
lm2
#multiple regression
lm2 <- lm(log(price)~1+within1km+reviews_per_month, data=dta2)
lm2
#multiple regression
lm2 <- lm(log(price)~1+within1km+reviews_per_month+room_type, data=dta2)
lm2
#multiple regression
lm2 <- lm(log(price)~., data=dta2)
lm2
#multiple regression
lm2 <- lm(log(price)~1+within1km+within5km, data=dta2)
lm2
#multiple regression
lm2 <- lm(log(price)~1+.-neighbourhood, data=dta2)
lm2
library(sandwich)
library(lmtest)
library(sandwich)
library(lmtest)
cf1 <- coeftest(lm2, vcovHC, Inf, type="HC0")
cf1
cf2 <- coeftest(lm2, vcovHC, Inf, type="HC0")
cf1 <- coeftest(lm1, vcovHC, Inf, type="HC0")
cf1
lm2 <- lm(log(price)~1+within1km, data=dta2)
plot(x=within1km, y=log(dta1$price),pch='.')
abline(lm2$coefficients, lwd=2, col='red')
cf2 <- coeftest(lm2, vcovHC, Inf, type="HC0")
cf2
#multiple regressions
lm3 <- lm(log(price)~1+within1km+within5km, data=dta2)
lm3
#multiple regressions
lm3 <- lm(log(price)~1+within1km+(within5km-within1km), data=dta2)
lm3
#multiple regressions
lm3 <- lm(log(price)~1+within1km+within5km, data=dta2)
#multiple regressions
lm3 <- lm(log(price)~1+within1km+within5km, data=dta2)
lm3
lm5 <- lm(log(price)~1+.-neighbourhood, data=dta2)
cf5 <- coeftest(lm5, vcovHC, Inf, type="HC0")
cf5
lm4 <- lm(log(price)~1+neighbourhood, data=dta2)
lm4
lm4 <- lm(log(price)~1+neighbourhood_group, data=dta2)
lm4
cf3 <- coeftest(lm3, vcovHC, Inf, type="HC0")
cf4 <- coeftest(lm4, vcovHC, Inf, type="HC0")
library(stargazer)
stargazer(cf1,cf2,cf3,cf4,cf5)
stargazer(cf1,cf2,cf3,cf4,cf5,type='html')
stargazer(cf1,cf2,cf3,cf4,cf5,type='text')
lm4 <- lm(log(price)~1+within1km+within5km+neighbourhood_group, data=dta2)
cf4 <- coeftest(lm4, vcovHC, Inf, type="HC0")
stargazer(cf1,cf2,cf3,cf4,cf5,type='text')
View(dta2)
rmarkdown::render("lec04.Rmd")
rmarkdown::render("lec04.Rmd")
rmarkdown::render("lec04.Rmd")
stargazer(head(dta2),type='html')
stargazer(head(dta2),type='text')
stargazer(dta2,type='text')
stargazer(dta2,type='html')
rmarkdown::render("lec04.Rmd")
rmarkdown::render("lec04.Rmd")
rmarkdown::render("lec04.Rmd")
library(knitr)
rmarkdown::render("lec04.Rmd")
rmarkdown::render("lec04.Rmd")
rmarkdown::render("lec04.Rmd")
rmarkdown::render("lec04.Rmd")
rmarkdown::render("lec04.Rmd")
rmarkdown::render("lec04.Rmd")
rmarkdown::render("lec04.Rmd")
View(dta2)
rmarkdown::render("lec04.Rmd")
rmarkdown::render("lec04.Rmd")
rmarkdown::render("lec04.Rmd")
rmarkdown::render("lec04.Rmd")
rmarkdown::render("lec04.Rmd")
rmarkdown::render("lec04.Rmd")
rmarkdown::render("lec04.Rmd")
rmarkdown::render("lec04.Rmd")
rmarkdown::render("lec04.Rmd")
rmarkdown::render("lec04.Rmd")
rmarkdown::render("lec04.Rmd")
stargazer(cf1,cf2,cf3,cf4,cf5,type='text')
