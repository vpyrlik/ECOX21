spec2 <- log(packs) ~
1+log(rprice)+log(rincome) |
1+log(rincome)+salestax +
log(rincome)^2+salestax^2
spec3 <- log(packs) ~
1+log(rprice)+log(rincome) |
1+log(rincome)+salestax +
log(rincome)^2+salestax^2+log(rincome)*salestax
spec4 <- log(packs) ~
1+log(rprice)+log(rincome) |
1+log(rincome)+salestax +
log(rincome)^2+salestax^2+log(rincome)*salestax +
(salestax>4)+(rincome>15)
spec5 <- log(packs) ~
1+log(rprice)+log(rincome) |
1+log(rincome)+salestax +
log(rincome)^2+salestax^2+log(rincome)*salestax +
(salestax>4)+(rincome>15)+(salestax>4)*(rincome>15) +
(salestax>4)*log(rincome)+(salestax>4)*log(rincome)^2 +
(rincome>15)*salestax+(rincome>15)*salestax^2
spec6 <- log(packs) ~
1+log(rprice)+log(rincome) |
1+log(rincome)+salestax +
log(rincome)^2+salestax^2+log(rincome)*salestax +
(salestax>4)+(rincome>15)+(salestax>4)*(rincome>15) +
(salestax>4)*log(rincome)+(salestax>4)*log(rincome)^2 +
(rincome>15)*salestax+(rincome>15)*salestax^2 +
rincome+rincome^2+rincome*salestax+rincome*(salestax>4)
###ESTIMATION
# estimation of the parameters
ols0  <- lm(   spec0, data = c1995)
tsls1 <- ivreg(spec1, data = c1995)
tsls2 <- ivreg(spec2, data = c1995)
tsls3 <- ivreg(spec3, data = c1995)
tsls4 <- ivreg(spec4, data = c1995)
tsls5 <- ivreg(spec5, data = c1995)
tsls6 <- ivreg(spec6, data = c1995)
# estimation of the Vbeta
ct0   <- coeftest(ols0,  vcov = vcovHC, type="HC0")
ct1   <- coeftest(tsls1, vcov = vcovHC, type="HC0")
ct2   <- coeftest(tsls2, vcov = vcovHC, type="HC0")
ct3   <- coeftest(tsls3, vcov = vcovHC, type="HC0")
ct4   <- coeftest(tsls4, vcov = vcovHC, type="HC0")
ct5   <- coeftest(tsls5, vcov = vcovHC, type="HC0")
ct6   <- coeftest(tsls6, vcov = vcovHC, type="HC0")
# results
stargazer(ct0, ct1, ct2, ct3, ct4, ct5, ct6,
type="text")
### SPLIT SAMPLE IV (one version)
## sampling
# set seed
set.seed(146)
# number of obs in the whole sample
N <- nrow(c1995)
# random approx half of the sample
smpl1 <- runif(N)>0.5
smpl2 <- !smpl1
## data
# dependent variable
Y <- log(c1995$packs)
# matrix of explanatory variables
X <- cbind(rep(1,N), #don't forget the intercept...
log(c1995$rprice),
log(c1995$rincome))
# matrix of IVs
Z <- cbind(rep(1,N), #don't forget the intercept here as well...
log(c1995$rincome),
c1995$salestax,
log(c1995$rincome)^2,
c1995$salestax^2,
log(c1995$rincome)*c1995$salestax,
as.numeric(c1995$salestax>4),
as.numeric(c1995$rincome>15),
#as.numeric(c1995$salestax>4)*as.numeric(c1995$rincome>15), #creates singularity! redundant IVs!
as.numeric(c1995$salestax>4)*log(c1995$rincome),
as.numeric(c1995$salestax>4)*log(c1995$rincome)^2,
as.numeric(c1995$rincome>15)*c1995$salestax,
as.numeric(c1995$rincome>15)*c1995$salestax^2,
c1995$rincome,
c1995$rincome^2,
c1995$rincome*c1995$salestax,
c1995$rincome*as.numeric(c1995$salestax>4))
# sampled data
Y1 <- Y[smpl1]
Y2 <- Y[smpl2]
X1 <- X[smpl1,]
X2 <- X[smpl2,]
Z1 <- Z[smpl1,1:3] #using only 3 IVs
Z2 <- Z[smpl2,1:3] #using only 3 IVs
## split-sample estimation
# step 1
pi_hat1 <- solve(crossprod(Z1,Z1))%*%crossprod(Z1,X1)
X2hat   <- Z2%*%pi_hat1
# step 2
beta_ssiv1 <- solve(crossprod(X2hat,X2hat))%*%crossprod(X2hat,Y2)
beta_ssiv1
# reverse step
pi_hat2 <- solve(crossprod(Z2,Z2))%*%crossprod(Z2,X2)
X1hat   <- Z1%*%pi_hat2
beta_ssiv2 <- solve(crossprod(X1hat,X1hat))%*%crossprod(X1hat,Y1)
beta_ssiv2
#avereged estimate
beta_ssiv3 <- (beta_ssiv1+beta_ssiv2)/2
beta_ssiv3
## remarks for SSIV
# repeat all SSIV (different sampling) and compare!
# also try different columns of Z as IVs (not too many though)
### JIVE
# package: install.packages("SteinIV")
library(SteinIV)
# using the same matrices constructed for SSIV
# example of JIVE, use only the first 3 IVs (like basic 2SLS, compare!)
jive.est(Y,X,Z[,1:3],SE=TRUE,n.bt=100)
# different specs of JIVE with differents sets of IVs
jive1 <- jive.est(Y,X,Z[,1:3],SE=TRUE,n.bt=100)
jive2 <- jive.est(Y,X,Z[,1:6],SE=TRUE,n.bt=100)
jive3 <- jive.est(Y,X,Z[,1:10],SE=TRUE,n.bt=100)
jive4 <- jive.est(Y,X,Z[,c(1:6,11:12)],SE=TRUE,n.bt=100)
### VARIETY OF ESTIMATES
price_elasticity_estimate <- c("OLS"   = ols0$coefficients["log(rprice)"],
"2SLS1" = tsls1$coefficients["log(rprice)"],
"2SLS2" = tsls2$coefficients["log(rprice)"],
"2SLS3" = tsls3$coefficients["log(rprice)"],
"2SLS4" = tsls4$coefficients["log(rprice)"],
"2SLS5" = tsls5$coefficients["log(rprice)"],
"2SLS6" = tsls6$coefficients["log(rprice)"],
"SSIV1" = beta_ssiv1[2],
"SSIV2" = beta_ssiv2[2],
"SSIV3" = beta_ssiv3[2],
"JIVE1" = jive1$est[2],
"JIVE2" = jive2$est[2],
"JIVE3" = jive3$est[2],
"JIVE4" = jive4$est[2])
plot(price_elasticity_estimate,
pch=c("o",rep("i",6),rep("s",3),rep("j",4)),
col=c("black",rep("blue",6),rep("red",3),rep("purple",4)),
main="Variety of price elasticity of demand estimates")
abline(price_elasticity_estimate[1],0,col='gray')
# Subsample for 1995 only
c1995 <- subset(CigarettesSW, year == "1995")
###MODELS SPECIFICATIONS
# baseline OLS "regression" (for benchmark only! meaningless not-a-model!)
spec0 <- log(packs)~1+log(rprice)+log(rincome)
# various IV-regressions with different sets of IVs
spec1 <- log(packs) ~
1+log(rprice)+log(rincome) |
1+log(rincome)+salestax
spec2 <- log(packs) ~
1+log(rprice)+log(rincome) |
1+log(rincome)+salestax +
log(rincome)^2+salestax^2
spec3 <- log(packs) ~
1+log(rprice)+log(rincome) |
1+log(rincome)+salestax +
log(rincome)^2+salestax^2+log(rincome)*salestax
spec4 <- log(packs) ~
1+log(rprice)+log(rincome) |
1+log(rincome)+salestax +
log(rincome)^2+salestax^2+log(rincome)*salestax +
(salestax>4)+(rincome>15)
spec5 <- log(packs) ~
1+log(rprice)+log(rincome) |
1+log(rincome)+salestax +
log(rincome)^2+salestax^2+log(rincome)*salestax +
(salestax>4)+(rincome>15)+(salestax>4)*(rincome>15) +
(salestax>4)*log(rincome)+(salestax>4)*log(rincome)^2 +
(rincome>15)*salestax+(rincome>15)*salestax^2
spec6 <- log(packs) ~
1+log(rprice)+log(rincome) |
1+log(rincome)+salestax +
log(rincome)^2+salestax^2+log(rincome)*salestax +
(salestax>4)+(rincome>15)+(salestax>4)*(rincome>15) +
(salestax>4)*log(rincome)+(salestax>4)*log(rincome)^2 +
(rincome>15)*salestax+(rincome>15)*salestax^2 +
rincome+rincome^2+rincome*salestax+rincome*(salestax>4)
###ESTIMATION
# estimation of the parameters
ols0  <- lm(   spec0, data = c1995)
tsls1 <- ivreg(spec1, data = c1995)
tsls2 <- ivreg(spec2, data = c1995)
tsls3 <- ivreg(spec3, data = c1995)
tsls4 <- ivreg(spec4, data = c1995)
tsls5 <- ivreg(spec5, data = c1995)
tsls6 <- ivreg(spec6, data = c1995)
# estimation of the Vbeta
ct0   <- coeftest(ols0,  vcov = vcovHC, type="HC0")
ct1   <- coeftest(tsls1, vcov = vcovHC, type="HC0")
ct2   <- coeftest(tsls2, vcov = vcovHC, type="HC0")
ct3   <- coeftest(tsls3, vcov = vcovHC, type="HC0")
ct4   <- coeftest(tsls4, vcov = vcovHC, type="HC0")
ct5   <- coeftest(tsls5, vcov = vcovHC, type="HC0")
ct6   <- coeftest(tsls6, vcov = vcovHC, type="HC0")
# results
stargazer(ct0, ct1, ct2, ct3, ct4, ct5, ct6,
type="text")
### SPLIT SAMPLE IV (one version)
## sampling
# set seed
set.seed(146)
# number of obs in the whole sample
N <- nrow(c1995)
# random approx half of the sample
smpl1 <- runif(N)>0.5
smpl2 <- !smpl1
## data
# dependent variable
Y <- log(c1995$packs)
# matrix of explanatory variables
X <- cbind(rep(1,N), #don't forget the intercept...
log(c1995$rprice),
log(c1995$rincome))
# matrix of IVs
Z <- cbind(rep(1,N), #don't forget the intercept here as well...
log(c1995$rincome),
c1995$salestax,
log(c1995$rincome)^2,
c1995$salestax^2,
log(c1995$rincome)*c1995$salestax,
as.numeric(c1995$salestax>4),
as.numeric(c1995$rincome>15),
#as.numeric(c1995$salestax>4)*as.numeric(c1995$rincome>15), #creates singularity! redundant IVs!
as.numeric(c1995$salestax>4)*log(c1995$rincome),
as.numeric(c1995$salestax>4)*log(c1995$rincome)^2,
as.numeric(c1995$rincome>15)*c1995$salestax,
as.numeric(c1995$rincome>15)*c1995$salestax^2,
c1995$rincome,
c1995$rincome^2,
c1995$rincome*c1995$salestax,
c1995$rincome*as.numeric(c1995$salestax>4))
# sampled data
Y1 <- Y[smpl1]
Y2 <- Y[smpl2]
X1 <- X[smpl1,]
X2 <- X[smpl2,]
Z1 <- Z[smpl1,1:3] #using only 3 IVs
Z2 <- Z[smpl2,1:3] #using only 3 IVs
## split-sample estimation
# step 1
pi_hat1 <- solve(crossprod(Z1,Z1))%*%crossprod(Z1,X1)
X2hat   <- Z2%*%pi_hat1
# step 2
beta_ssiv1 <- solve(crossprod(X2hat,X2hat))%*%crossprod(X2hat,Y2)
beta_ssiv1
# reverse step
pi_hat2 <- solve(crossprod(Z2,Z2))%*%crossprod(Z2,X2)
X1hat   <- Z1%*%pi_hat2
beta_ssiv2 <- solve(crossprod(X1hat,X1hat))%*%crossprod(X1hat,Y1)
beta_ssiv2
#avereged estimate
beta_ssiv3 <- (beta_ssiv1+beta_ssiv2)/2
beta_ssiv3
### JIVE
# package: install.packages("SteinIV")
library(SteinIV)
# using the same matrices constructed for SSIV
# example of JIVE, use only the first 3 IVs (like basic 2SLS, compare!)
jive.est(Y,X,Z[,1:3],SE=TRUE,n.bt=100)
# different specs of JIVE with differents sets of IVs
jive1 <- jive.est(Y,X,Z[,1:3],SE=TRUE,n.bt=100)
jive2 <- jive.est(Y,X,Z[,1:6],SE=TRUE,n.bt=100)
jive3 <- jive.est(Y,X,Z[,1:10],SE=TRUE,n.bt=100)
jive3 <- jive.est(Y,X,Z[,1:9],SE=TRUE,n.bt=100)
jive4 <- jive.est(Y,X,Z[,c(1:6,11:12)],SE=TRUE,n.bt=100)
### VARIETY OF ESTIMATES
price_elasticity_estimate <- c("OLS"   = ols0$coefficients["log(rprice)"],
"2SLS1" = tsls1$coefficients["log(rprice)"],
"2SLS2" = tsls2$coefficients["log(rprice)"],
"2SLS3" = tsls3$coefficients["log(rprice)"],
"2SLS4" = tsls4$coefficients["log(rprice)"],
"2SLS5" = tsls5$coefficients["log(rprice)"],
"2SLS6" = tsls6$coefficients["log(rprice)"],
"SSIV1" = beta_ssiv1[2],
"SSIV2" = beta_ssiv2[2],
"SSIV3" = beta_ssiv3[2],
"JIVE1" = jive1$est[2],
"JIVE2" = jive2$est[2],
"JIVE3" = jive3$est[2],
"JIVE4" = jive4$est[2])
plot(price_elasticity_estimate,
pch=c("o",rep("i",6),rep("s",3),rep("j",4)),
col=c("black",rep("blue",6),rep("red",3),rep("purple",4)),
main="Variety of price elasticity of demand estimates")
abline(price_elasticity_estimate[1],0,col='gray')
legend("topleft",
legend=c("OLS","TSLS","SSIV","JIVE"),
lty=c(0,0,0,0),
pch=c("o","i","s","j"),
col=c("black","blue","red","purple"))
legend("topleft",
legend=c("OLS","TSLS","SSIV","JIVE"),
lty=c(0,0,0,0),
pch=c("o","i","s","j"),
col=c("black","blue","red","purple"),
text.col = c("black","blue","red","purple"))
plot(price_elasticity_estimate,
pch=c("o",rep("i",6),rep("s",3),rep("j",4)),
col=c("black",rep("blue",6),rep("red",3),rep("purple",4)),
main="Variety of price elasticity of demand estimates")
abline(price_elasticity_estimate[1],0,col='gray')
legend("topleft",
legend=c("OLS","TSLS","SSIV","JIVE"),
lty=c(0,0,0,0),
pch=c("o","i","s","j"),
col=c("black","blue","red","purple"),
text.col = c("black","blue","red","purple"),
border = FALSE)
### PACKAGES
#install.packages("AER")
library(AER)
library(sandwich)
library(lmtest)
library(stargazer)
### DATA
# Demand for Cigarettes dataset
data("CigarettesSW")
# New variables
CigarettesSW$rprice   <- with(CigarettesSW, price / cpi)
CigarettesSW$salestax <- with(CigarettesSW, (taxs - tax) / cpi)
CigarettesSW$rincome  <- with(CigarettesSW, income / population / cpi)
# Subsample for 1995 only
c1995 <- subset(CigarettesSW, year == "1995")
###MODELS SPECIFICATIONS
# baseline OLS "regression" (for benchmark only! meaningless not-a-model!)
spec0 <- log(packs)~1+log(rprice)+log(rincome)
# various IV-regressions with different sets of IVs
spec1 <- log(packs) ~
1+log(rprice)+log(rincome) |
1+log(rincome)+salestax
spec2 <- log(packs) ~
1+log(rprice)+log(rincome) |
1+log(rincome)+salestax +
log(rincome)^2+salestax^2
spec3 <- log(packs) ~
1+log(rprice)+log(rincome) |
1+log(rincome)+salestax +
log(rincome)^2+salestax^2+log(rincome)*salestax
spec4 <- log(packs) ~
1+log(rprice)+log(rincome) |
1+log(rincome)+salestax +
log(rincome)^2+salestax^2+log(rincome)*salestax +
(salestax>4)+(rincome>15)
spec5 <- log(packs) ~
1+log(rprice)+log(rincome) |
1+log(rincome)+salestax +
log(rincome)^2+salestax^2+log(rincome)*salestax +
(salestax>4)+(rincome>15)+(salestax>4)*(rincome>15) +
(salestax>4)*log(rincome)+(salestax>4)*log(rincome)^2 +
(rincome>15)*salestax+(rincome>15)*salestax^2
spec6 <- log(packs) ~
1+log(rprice)+log(rincome) |
1+log(rincome)+salestax +
log(rincome)^2+salestax^2+log(rincome)*salestax +
(salestax>4)+(rincome>15)+(salestax>4)*(rincome>15) +
(salestax>4)*log(rincome)+(salestax>4)*log(rincome)^2 +
(rincome>15)*salestax+(rincome>15)*salestax^2 +
rincome+rincome^2+rincome*salestax+rincome*(salestax>4)
###ESTIMATION
# estimation of the parameters
ols0  <- lm(   spec0, data = c1995)
tsls1 <- ivreg(spec1, data = c1995)
tsls2 <- ivreg(spec2, data = c1995)
tsls3 <- ivreg(spec3, data = c1995)
tsls4 <- ivreg(spec4, data = c1995)
tsls5 <- ivreg(spec5, data = c1995)
tsls6 <- ivreg(spec6, data = c1995)
# estimation of the Vbeta
ct0   <- coeftest(ols0,  vcov = vcovHC, type="HC0")
ct1   <- coeftest(tsls1, vcov = vcovHC, type="HC0")
ct2   <- coeftest(tsls2, vcov = vcovHC, type="HC0")
ct3   <- coeftest(tsls3, vcov = vcovHC, type="HC0")
ct4   <- coeftest(tsls4, vcov = vcovHC, type="HC0")
ct5   <- coeftest(tsls5, vcov = vcovHC, type="HC0")
ct6   <- coeftest(tsls6, vcov = vcovHC, type="HC0")
# results
stargazer(ct0, ct1, ct2, ct3, ct4, ct5, ct6,
type="text")
### SPLIT SAMPLE IV (one version)
## sampling
# set seed
set.seed(146)
# number of obs in the whole sample
N <- nrow(c1995)
# random approx half of the sample
smpl1 <- runif(N)>0.5
smpl2 <- !smpl1
## data
# dependent variable
Y <- log(c1995$packs)
# matrix of explanatory variables
X <- cbind(rep(1,N), #don't forget the intercept...
log(c1995$rprice),
log(c1995$rincome))
# matrix of IVs
Z <- cbind(rep(1,N), #don't forget the intercept here as well...
log(c1995$rincome),
c1995$salestax,
log(c1995$rincome)^2,
c1995$salestax^2,
log(c1995$rincome)*c1995$salestax,
as.numeric(c1995$salestax>4),
as.numeric(c1995$rincome>15),
#as.numeric(c1995$salestax>4)*as.numeric(c1995$rincome>15), #creates singularity! redundant IVs!
as.numeric(c1995$salestax>4)*log(c1995$rincome),
as.numeric(c1995$salestax>4)*log(c1995$rincome)^2,
as.numeric(c1995$rincome>15)*c1995$salestax,
as.numeric(c1995$rincome>15)*c1995$salestax^2,
c1995$rincome,
c1995$rincome^2,
c1995$rincome*c1995$salestax,
c1995$rincome*as.numeric(c1995$salestax>4))
# sampled data
Y1 <- Y[smpl1]
Y2 <- Y[smpl2]
X1 <- X[smpl1,]
X2 <- X[smpl2,]
Z1 <- Z[smpl1,1:3] #using only 3 IVs
Z2 <- Z[smpl2,1:3] #using only 3 IVs
## split-sample estimation
# step 1
pi_hat1 <- solve(crossprod(Z1,Z1))%*%crossprod(Z1,X1)
X2hat   <- Z2%*%pi_hat1
# step 2
beta_ssiv1 <- solve(crossprod(X2hat,X2hat))%*%crossprod(X2hat,Y2)
beta_ssiv1
# reverse step
pi_hat2 <- solve(crossprod(Z2,Z2))%*%crossprod(Z2,X2)
X1hat   <- Z1%*%pi_hat2
beta_ssiv2 <- solve(crossprod(X1hat,X1hat))%*%crossprod(X1hat,Y1)
beta_ssiv2
#avereged estimate
beta_ssiv3 <- (beta_ssiv1+beta_ssiv2)/2
beta_ssiv3
## remarks for SSIV
# repeat all SSIV (different sampling) and compare!
# also try different columns of Z as IVs (not too many though)
### JIVE
# package: install.packages("SteinIV")
library(SteinIV)
# using the same matrices constructed for SSIV
# example of JIVE, use only the first 3 IVs (like basic 2SLS, compare!)
jive.est(Y,X,Z[,1:3],SE=TRUE,n.bt=100)
# different specs of JIVE with differents sets of IVs
jive1 <- jive.est(Y,X,Z[,1:3],SE=TRUE,n.bt=100)
jive2 <- jive.est(Y,X,Z[,1:6],SE=TRUE,n.bt=100)
jive3 <- jive.est(Y,X,Z[,1:9],SE=TRUE,n.bt=100)
jive4 <- jive.est(Y,X,Z[,c(1:6,11:12)],SE=TRUE,n.bt=100)
### VARIETY OF ESTIMATES
price_elasticity_estimate <- c("OLS"   = ols0$coefficients["log(rprice)"],
"2SLS1" = tsls1$coefficients["log(rprice)"],
"2SLS2" = tsls2$coefficients["log(rprice)"],
"2SLS3" = tsls3$coefficients["log(rprice)"],
"2SLS4" = tsls4$coefficients["log(rprice)"],
"2SLS5" = tsls5$coefficients["log(rprice)"],
"2SLS6" = tsls6$coefficients["log(rprice)"],
"SSIV1" = beta_ssiv1[2],
"SSIV2" = beta_ssiv2[2],
"SSIV3" = beta_ssiv3[2],
"JIVE1" = jive1$est[2],
"JIVE2" = jive2$est[2],
"JIVE3" = jive3$est[2],
"JIVE4" = jive4$est[2])
plot(price_elasticity_estimate,
pch=c("o",rep("i",6),rep("s",3),rep("j",4)),
col=c("black",rep("blue",6),rep("red",3),rep("purple",4)),
main="Variety of price elasticity of demand estimates")
abline(price_elasticity_estimate[1],0,col='gray')
legend("topleft",
legend=c("OLS","TSLS","SSIV","JIVE"),
lty=c(0,0,0,0),
pch=c("o","i","s","j"),
col=c("black","blue","red","purple"),
text.col = c("black","blue","red","purple"),
border = FALSE)
#Packages
library(foreign)
library(tidyverse)
library(stargazer)
library(sandwich)
library(lmtest)
library(margins)
#Data
setwd("~/ECOX21/stuff")
r25 <- read.dta('r25h_os26c.dta', convert.factors = FALSE)
r25 <- r25 %>% filter(ug7   ==  1        &
uf14  <   99999990 &
uf14  >   0)
r25$kids <- rowSums(2016-r25[,grep("UB([1-9]|1[0-5])_5",colnames(r25))]<18,na.rm=TRUE)
r25$older <- rowSums(2016-r25[,grep("UB([1-9]|1[0-5])_5",colnames(r25))]>65,na.rm=TRUE)
dta<- data.frame(own_tv   = as.numeric(r25$uc9_5_2a==1),
n_all    = r25$u_nfm,
n_kids   = r25$kids,
n_old    = r25$older,
msk      = as.numeric(r25$region==138),
spb      = as.numeric(r25$region==141),
popul    = r25$popul/(10^6),
loginc   = log(r25$uf14),
livelong = as.numeric(r25$uf12_a == 1),
dacha    = as.numeric(r25$uc9_101a == 1),
tomatoes = as.numeric(r25$ud8_2a == 1))
dta$tomatoes[is.na(dta$tomatoes)] <- 0
rm(r25)
#Summary
stargazer(dta, type='text')
#Modeling
spec0 <- own_tv ~ .
spec1 <- own_tv ~ 1+n_kids+n_old+loginc+I(loginc^2)+dacha+tomatoes+livelong+msk+spb+I(log(popul))
spec2 <- own_tv ~ 1+n_kids+n_old+loginc+I(loginc^2)+dacha+msk+spb+I(log(popul))
glm0 <- glm(spec0, data=dta, family = binomial(link="probit"))
glm1 <- glm(spec1, data=dta, family = binomial(link="probit"))
glm2 <- glm(spec2, data=dta, family = binomial(link="probit"))
stargazer(glm0, glm1, glm2,
type='text')
